#!/usr/bin/env python3
"""
M√≥dulo para formata√ß√£o avan√ßada de conte√∫do e melhoria de layout
"""

import re
from typing import List, Dict

class ContentFormatter:
    """Classe para formata√ß√£o avan√ßada de artigos."""
    
    def __init__(self):
        self.emoji_map = {
            "resumo": "üìã",
            "an√°lise": "üîç", 
            "t√©cnica": "‚öôÔ∏è",
            "performance": "üìä",
            "security": "üîí",
            "devops": "üöÄ",
            "infrastructure": "üèóÔ∏è",
            "implementation": "üíª",
            "conclus√£o": "‚úÖ",
            "pr√≥ximos": "üéØ",
            "importante": "‚ö†Ô∏è",
            "dica": "üí°",
            "exemplo": "üìù",
            "c√≥digo": "```",
            "lista": "‚Ä¢",
            "vantagem": "‚úÖ",
            "desvantagem": "‚ùå"
        }
    
    def add_visual_elements(self, content: str) -> str:
        """Adiciona elementos visuais ao conte√∫do."""
        
        # Adiciona emojis aos t√≠tulos baseado no conte√∫do
        for keyword, emoji in self.emoji_map.items():
            pattern = rf"(##\s+)([^#\n]*{keyword}[^#\n]*)"
            replacement = rf"\1{emoji} \2"
            content = re.sub(pattern, replacement, content, flags=re.IGNORECASE)
        
        return content
    
    def add_callout_boxes(self, content: str) -> str:
        """Adiciona caixas de destaque para informa√ß√µes importantes."""
        
        # Identifica par√°grafos importantes
        important_patterns = [
            r"(√â importante notar que.*?\.)",
            r"(Vale destacar que.*?\.)",
            r"(Aten√ß√£o:.*?\.)",
            r"(Importante:.*?\.)",
            r"(Cuidado:.*?\.)"
        ]
        
        for pattern in important_patterns:
            content = re.sub(
                pattern,
                r"> **üí° Destaque:** \1",
                content,
                flags=re.IGNORECASE | re.DOTALL
            )
        
        return content
    
    def add_code_blocks(self, content: str) -> str:
        """Adiciona blocos de c√≥digo quando apropriado."""
        
        # Identifica men√ß√µes a comandos ou c√≥digo
        code_patterns = [
            (r"comando `([^`]+)`", r"```bash\n\1\n```"),
            (r"c√≥digo `([^`]+)`", r"```\n\1\n```"),
            (r"script `([^`]+)`", r"```python\n\1\n```"),
            (r"configura√ß√£o `([^`]+)`", r"```yaml\n\1\n```")
        ]
        
        for pattern, replacement in code_patterns:
            content = re.sub(pattern, replacement, content)
        
        return content
    
    def add_tables(self, content: str) -> str:
        """Adiciona tabelas quando h√° compara√ß√µes."""
        
        # Procura por compara√ß√µes e transforma em tabelas
        comparison_pattern = r"(\w+):\s*([^\.]+)\.\s*(\w+):\s*([^\.]+)\."
        
        def replace_with_table(match):
            item1, desc1, item2, desc2 = match.groups()
            return f"""
| Aspecto | {item1} | {item2} |
|---------|---------|---------|
| Caracter√≠sticas | {desc1} | {desc2} |
"""
        
        content = re.sub(comparison_pattern, replace_with_table, content)
        
        return content
    
    def add_lists_and_bullets(self, content: str) -> str:
        """Melhora formata√ß√£o de listas."""
        
        # Transforma frases com "incluem" em listas
        list_patterns = [
            (r"incluem:?\s*([^\.]+)\.", self._convert_to_list),
            (r"s√£o:?\s*([^\.]+)\.", self._convert_to_list),
            (r"principais.*?:?\s*([^\.]+)\.", self._convert_to_list)
        ]
        
        for pattern, converter in list_patterns:
            content = re.sub(pattern, converter, content, flags=re.IGNORECASE)
        
        return content
    
    def _convert_to_list(self, match):
        """Converte texto em lista formatada."""
        items_text = match.group(1)
        items = [item.strip() for item in re.split(r'[,;]', items_text) if item.strip()]
        
        if len(items) > 2:
            formatted_list = "\n\n"
            for item in items:
                formatted_list += f"- **{item.strip()}**\n"
            formatted_list += "\n"
            return formatted_list
        
        return match.group(0)  # Retorna original se n√£o for lista v√°lida
    
    def add_section_summaries(self, content: str) -> str:
        """Adiciona resumos no in√≠cio de se√ß√µes longas."""
        
        sections = content.split('\n## ')
        formatted_sections = []
        
        for i, section in enumerate(sections):
            if i == 0:  # Primeira se√ß√£o (antes do primeiro ##)
                formatted_sections.append(section)
                continue
            
            lines = section.split('\n')
            section_title = lines[0] if lines else ""
            section_content = '\n'.join(lines[1:]) if len(lines) > 1 else ""
            
            # Se a se√ß√£o √© muito longa, adiciona resumo
            if len(section_content) > 800:
                # Extrai primeira frase como resumo
                first_sentence = section_content.split('.')[0] + '.'
                summary = f"\n> **üìã Resumo:** {first_sentence}\n"
                section_content = summary + section_content
            
            formatted_sections.append(f"## {section_title}\n{section_content}")
        
        return '\n'.join(formatted_sections)
    
    def add_reading_aids(self, content: str) -> str:
        """Adiciona elementos que facilitam a leitura."""
        
        # Adiciona separadores visuais
        content = content.replace('\n\n## ', '\n\n---\n\n## ')
        
        # Adiciona √≠cones para diferentes tipos de informa√ß√£o
        content = re.sub(r'\*\*(Vantagem|Benef√≠cio|Pr√≥s?):\*\*', r'‚úÖ **\1:**', content, flags=re.IGNORECASE)
        content = re.sub(r'\*\*(Desvantagem|Problema|Contras?):\*\*', r'‚ùå **\1:**', content, flags=re.IGNORECASE)
        content = re.sub(r'\*\*(Dica|Sugest√£o):\*\*', r'üí° **\1:**', content, flags=re.IGNORECASE)
        content = re.sub(r'\*\*(Aten√ß√£o|Cuidado|Importante):\*\*', r'‚ö†Ô∏è **\1:**', content, flags=re.IGNORECASE)
        
        return content
    
    def format_article(self, content: str) -> str:
        """Aplica todas as formata√ß√µes ao artigo."""
        
        print("üé® Aplicando formata√ß√£o avan√ßada...")
        
        # Aplica todas as melhorias
        content = self.add_visual_elements(content)
        content = self.add_callout_boxes(content)
        content = self.add_code_blocks(content)
        content = self.add_tables(content)
        content = self.add_lists_and_bullets(content)
        content = self.add_section_summaries(content)
        content = self.add_reading_aids(content)
        
        # Adiciona espa√ßamento adequado
        content = re.sub(r'\n{3,}', '\n\n', content)  # Remove espa√ßos excessivos
        content = re.sub(r'(\n## )', r'\n\n\1', content)  # Espa√ßo antes de se√ß√µes
        
        print("‚úÖ Formata√ß√£o aplicada com sucesso")
        return content

# Inst√¢ncia global
formatter = ContentFormatter()

def format_content(content: str) -> str:
    """Fun√ß√£o helper para formata√ß√£o de conte√∫do."""
    return formatter.format_article(content)